Status		Opcode		Explanation
Yes		0NNN		Calls RCA 1802 program at address NNN.
Yes		00E0		Clears the screen.
Yes		00EE		Returns from a subroutine.
		
Yes		1NNN		Jumps to address NNN.
		
Yes		2NNN		Calls subroutine at NNN.
		
Yes		3XNN		Skips the next instruction if VX equals NN.
		
Yes		4XNN		Skips the next instruction if VX doesn't equal NN.
		
Yes		5XY0		Skips the next instruction if VX equals VY.
		
Yes		6XNN		Sets VX to NN.
		
Yes		7XNN		Adds NN to VX.
		
Yes		8XY0		Sets VX to the value of VY.
Yes		8XY1		Sets VX to VX or VY.
Yes		8XY2		Sets VX to VX and VY.
Yes		8XY3		Sets VX to VX xor VY.
Yes		8XY4		Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there isn't.
Yes		8XY5		VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when there isn't.
Yes		8XY6		Shifts VX right by one. VF is set to the value of the least significant bit of VX before the shift. [2]
Yes		8XY7		Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when there isn't.
Yes		8XYE		Shifts VX left by one. VF is set to the value of the most significant bit of VX before the shift. [2]
		
Yes		9XY0		Skips the next instruction if VX doesn't equal VY.
		
Yes		ANNN		Sets I to the address NNN.
		
Yes		BNNN		Jumps to the address NNN plus V0.
		
Sorta		CXNN		Sets VX to a random number and NN.
		
YES		DXYN		Draws a sprite at coordinate (VX, VY) that has a width of 8 pixels and a height of N pixels. Each row of 8 pixels is read as bit-coded (with the most significant bit of each byte displayed on the left) starting from memory location I; I value doesn't change after the execution of this instruction. As described above, VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and to 0 if that doesn't happen.
		
		EX9E		Skips the next instruction if the key stored in VX is pressed.
		EXA1		Skips the next instruction if the key stored in VX isn't pressed.
		FX07		Sets VX to the value of the delay timer.
		FX0A		A key press is awaited, and then stored in VX.
		FX15		Sets the delay timer to VX.
		FX18		Sets the sound timer to VX.
		FX1E		Adds VX to I. [3]
		FX29		Sets I to the location of the sprite for the character in VX. Characters 0-F (in hexadecimal) are represented by a 4x5 font.
		FX33		Stores the Binary-coded decimal representation of VX, with the most significant of three digits at the address in I, the middle digit at I plus 1, and the least significant digit at I plus 2.
		FX55		Stores V0 to VX in memory starting at address I. [4]
		FX65		Fills V0 to VX with values from memory starting at address I. [4]
		
		
		1^ Intelligent Machines Journal (InfoWorld): pp. 9. 1978-12-11. http://books.google.com/books?id=IT4EAAAAMBAJ&pg=PA9&lpg=PA9&dq=aresco+viper&source=bl&ots=T6SWquzNJl&sig=eD3sNPWaaNN631FC085I3vpdnVA&hl=en&ei=4EFkS4GsBpaekQXczunYBQ&sa=X&oi=book_result&ct=result&resnum=4&ved=0CA8Q6AEwAw#v=onepage&q=aresco%20viper&f=false. Retrieved 2010-01-30.
2^ a b On the original interpreter, the value of VY is shifted, and the result is stored into VX. On current implementations, Y is ignored.
3^ VF is set to 1 when range overflow (I+VX>0xFFF), and 0 when there isn't. This is undocumented feature of the Chip-8 and used by Spacefight 2019! game.
4^ a b On the original interpreter, when the operation is done, I=I+X+1.
